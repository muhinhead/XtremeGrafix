// Generated by com.nm.GridEditGenerator at Thu Oct 29 08:45:37 EET 2015
// generated file, so all hand editions will be overwritten
package com.xgraf;

import static com.xgraf.RecordEditPanel.getBorderPanel;
import static com.xgraf.RecordEditPanel.getGridPanel;
import com.xgraf.orm.Invoice;
import com.xgraf.orm.Invoiceitem;
import com.xgraf.orm.Statement;
import com.xgraf.orm.Statementitem;
import com.xgraf.orm.dbobject.DbObject;
import com.xlend.util.Java2sAutoComboBox;
import com.xlend.util.PopupDialog;
import com.xlend.util.SelectedDateSpinner;
import com.xlend.util.SelectedNumberSpinner;
import com.xlend.util.Util;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;

public class EditStatementPanel extends BaseEditDocPanel {

    private SelectedDateSpinner statementDateSP;
    private JLabel dtlLbl;
    private JLabel termsLbl;
    private JLabel balanceLabel;
    private SelectedNumberSpinner paymentDueNumberSpinner;

    public EditStatementPanel(DbObject dbObject) {
        super(dbObject);
    }

    private JTextField idField;
    private JComboBox companyIdComboBox;
    private JComboBox contactIdComboBox;
    private JTextField statementRefField;

    //private JTextField bankAccHolderField;
    //private JTextField bankField;
    //private JTextField bankBranchCodeField;
    //private JTextField bankAccNoField;
    //private Java2sAutoComboBox bankAccTypeCB;
    //private SelectedNumberSpinner paymentDueNumberSpinner;
    @Override
    protected void fillContent() {
        String[] titles = {
            "ID:",
            "Statement ref #:",
            "Date:",
            "<html><b>Banking </b></html>",
            "Acc holder:",
            "Bank:",
            "Branch Code:",
            "Account No:",
            "Account Type:",
            "<html><b>Terms & </b></html>",
            "Payment of outstanding balance is due within:",
            "", "", "",
            "Outstanding Account Balance:"
        };
        JComponent[] edits = new JComponent[]{
            getGridPanel(idField = new JTextField(), 5),
            getGridPanel(statementRefField = new JTextField(12), 2),
            getBorderPanel(new JComponent[]{
                statementDateSP = new SelectedDateSpinner(),
                new JPanel(), new JPanel()
            }),
            dtlLbl = new JLabel("Details"),
            bankAccHolderField = new JTextField(),
            bankField = new JTextField(),
            getGridPanel(bankBranchCodeField = new JTextField(), 3),
            getGridPanel(bankAccNoField = new JTextField(), 3),
            bankAccTypeCB = new Java2sAutoComboBox(XGrafWorks.loadDistinct(new String[]{"statement", "quote", "invoice"}, "bank_acc_type")),
            termsLbl = new JLabel("Conditions"),
            getBorderPanel(new JComponent[]{paymentDueNumberSpinner = new SelectedNumberSpinner(1, 1, 365, 1)}),
            new JPanel(), new JPanel(), new JPanel(),
            balanceLabel = new JLabel("0.0")
        };
        idField.setEnabled(false);
        statementDateSP.setEditor(new JSpinner.DateEditor(statementDateSP, "dd/MM/yyyy"));
        Util.addFocusSelectAllAction(statementDateSP);
        bankAccTypeCB.setEditable(true);
        bankAccTypeCB.setStrict(false);

        organizePanels(titles, edits, null);
        //TODO
        MyJideTabbedPane detailsTab = new MyJideTabbedPane();
        if (getDbObject() != null) {
            try {
                detailsTab.add(getItmGrid(getDbObject()), "Items");
            } catch (RemoteException ex) {
                XGrafWorks.logAndShowMessage(ex);
            }
        } else {
            detailsTab.add(new JLabel(" To add some items save first this record then open for editing"), "Items");
        }

        add(detailsTab, BorderLayout.CENTER);
    }

    @Override
    public void loadData() {
        Statement st = (Statement) getDbObject();
        if (st != null) {
            idField.setText(st.getStatementId().toString());
            statementRefField.setText(st.getStatementRef());
            statementDateSP.setValue(new java.util.Date(st.getStatementDate().getTime()));
            bankAccHolderField.setText(st.getBankAccHolder());
            bankField.setText(st.getBank());
            bankBranchCodeField.setText(st.getBankBranchCode());
            bankAccNoField.setText(st.getBankAccNo());
            paymentDueNumberSpinner.setValue(st.getPaymentDue());
            selectComboItem(companyCB, st.getCompanyId());
            selectComboItem(contactPersonCB, st.getContactId());
            recalcTotal(st.getPK_ID());
        }
    }

    @Override
    public boolean save() throws Exception {
        Statement st = (Statement) getDbObject();
        boolean isNew = (st == null);
        if (isNew) {
            st = new Statement(null);
            st.setStatementId(0);
        }
        st.setStatementRef(statementRefField.getText());
        java.util.Date dt = (java.util.Date) statementDateSP.getValue();
        st.setStatementDate(new java.sql.Date(dt.getTime()));
        st.setBank(bankField.getText());
        st.setBankAccHolder(bankAccHolderField.getText());
        st.setBankBranchCode(bankBranchCodeField.getText());
        st.setBankAccNo(bankAccNoField.getText());
        st.setBankAccType((String) bankAccTypeCB.getSelectedItem());
        st.setCompanyId(getSelectedCbItem(companyCB));
        st.setContactId(getSelectedCbItem(contactPersonCB));
        st.setPaymentDue((Integer) paymentDueNumberSpinner.getValue());
        st.setOutstandingBalance(Double.parseDouble(balanceLabel.getText().substring(1)));
        return saveDbRecord((DbObject) st, isNew);
    }

    @Override
    protected String tableName() {
        return "statement";
    }

    AbstractAction printAction() {
        return new AbstractAction("Print", new ImageIcon(XGrafWorks.loadImage("printform.png", EditRecordDialog.class))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                new PopupDialog(null, "Print preview", getDbObject()) {
                    @Override
                    protected Color getHeaderBackground() {
                        return XGrafWorks.HDR_COLOR;
                    }

                    @Override
                    protected void fillContent() {
                        super.fillContent();
                        getContentPane().add(getPrintPanel(this), BorderLayout.CENTER);
                        setPreferredSize(new Dimension(750, 700));
                    }
                };
            }
        };
    }

    @Override
    protected JPanel getPrintPanel(PopupDialog dlg) {
        return getDbObject() != null ? new StatementPrintPanel(dlg, (Statement) getDbObject()) : new JPanel();
    }

    @Override
    public void recalcTotal(Integer docID) {
        try {
            double sum = 0.0;
            DbObject[] itms = XGrafWorks.getExchanger().getDbObjects(Statementitem.class, "statement_id=" + docID, null);
            for (DbObject o : itms) {
                Statementitem itm = (Statementitem) o;
                sum += (itm.getBalance());
            }
            balanceLabel.setText("R" + Math.round(100*sum)/100.0);
        } catch (RemoteException ex) {
            XGrafWorks.logAndShowMessage(ex);
        }
    }

    private GeneralGridPanel getItmGrid(DbObject dbObject) throws RemoteException {
        StatementitemGrid itmGrid = new StatementitemGrid(XGrafWorks.getExchanger(), dbObject.getPK_ID(), this);
        itmGrid.setPreferredSize(new Dimension(itmGrid.getPreferredSize().width, 300));
        return itmGrid;
    }
}
