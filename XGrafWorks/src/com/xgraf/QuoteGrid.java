// Generated by com.nm.GridEditGenerator at Sun Sep 13 09:56:58 EEST 2015
// generated file, so all hand editions will be overwritten
package com.xgraf;

import com.xgraf.orm.Quote;
import com.xgraf.remote.IMessageSender;
import java.awt.event.ActionEvent;
import java.rmi.RemoteException;
import java.util.HashMap;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class QuoteGrid extends GeneralGridPanel {

    private static final String SELECT = "Select "
            + "quote_id \"Id\","
            + "quote_date \"Date\","
            + "(select name from company where company_id=quote.company_id) \"Customer\","
            + "quote_ref \"Quote Ref #\","
            + "order_no \"Order No\","
//            + "(select name from contact where contact_id=quote.contact_id) \"Contact person\","
            + "sub_total \"Amount\" "
            + " from quote where ifnull(is_proforma,0)=0";

    private static HashMap<Integer, Integer> maxWidths = new HashMap<Integer, Integer>();

    static {
        maxWidths.put(0, 40);
        maxWidths.put(5, 200);
    }

    /**
     * @return the SELECT
     */
    protected static String getSELECT() {
        return SELECT;
    }

    public QuoteGrid(IMessageSender exchanger) throws RemoteException {
        super(exchanger, SELECT, maxWidths, false);
    }

    public QuoteGrid(IMessageSender exchanger, String select) throws RemoteException {
        super(exchanger, select, maxWidths, false);
    }

    private boolean isProFormInvoice() {
        return getSelect().indexOf("0)=1") > 0;
    }

    @Override
    protected AbstractAction addAction() {
        return new AbstractAction("Add", new ImageIcon(XGrafWorks.loadImage("newdocument.png", QuoteGrid.class))) {
            @Override
            public void actionPerformed(ActionEvent ae) {
                EditQuoteDialog ed = isProFormInvoice()
                        ? new EditProFormaInvoiceDialog("Add Pro-Forma Invoice", null)
                        : new EditQuoteDialog("Add Quote", null);
                if (EditQuoteDialog.okPressed) {
                    Quote rec = (Quote) ed.getEditPanel().getDbObject();
                    refresh(rec.getPK_ID());
                }
            }
        };
    }

    @Override
    protected AbstractAction editAction() {
        return new AbstractAction("Edit", new ImageIcon(XGrafWorks.loadImage("edit.png", QuoteGrid.class))) {
            @Override
            public void actionPerformed(ActionEvent ae) {
                int id = getSelectedID();
                if (id != 0) {
                    try {
                        Quote quote = (Quote) exchanger.loadDbObjectOnID(Quote.class, id);
                        if (isProFormInvoice()) {
                            new EditProFormaInvoiceDialog("Edit Pro-Forma Invoice", quote);
                        } else {
                            new EditQuoteDialog("Edit record", quote);
                        }
                        if (EditQuoteDialog.okPressed) {
                            refresh();
                        }
                    } catch (RemoteException ex) {
                        XGrafWorks.logAndShowMessage(ex);
                    }
                }
            }
        };
    }

    @Override
    protected AbstractAction delAction() {
        return new AbstractAction("Delete", new ImageIcon(XGrafWorks.loadImage("trash.png", QuoteGrid.class))) {
            @Override
            public void actionPerformed(ActionEvent ae) {
                int id = getSelectedID();
                if (id != 0) {
                    try {
                        Quote quote = (Quote) exchanger.loadDbObjectOnID(Quote.class, id);
                        if (quote != null && GeneralFrame.yesNo("Attention!", "Do you want to delete this record?") == JOptionPane.YES_OPTION) {
                            exchanger.deleteObject(quote);
                            refresh();
                        }
                    } catch (RemoteException ex) {
                        XGrafWorks.logAndShowMessage(ex);
                    }
                }
            }
        };
    }
}
