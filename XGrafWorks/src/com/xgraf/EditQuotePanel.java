// Generated by com.nm.GridEditGenerator at Sun Sep 13 09:56:58 EEST 2015
// generated file, so all hand editions will be overwritten
package com.xgraf;

import com.xgraf.orm.Company;
import com.xgraf.orm.Contact;
import com.xgraf.orm.IDocument;
import com.xgraf.orm.Invoice;
import com.xgraf.orm.Quote;
import com.xgraf.orm.Quoteitem;
import com.xgraf.orm.dbobject.ComboItem;
import com.xgraf.orm.dbobject.DbObject;
import com.xlend.util.Java2sAutoComboBox;
import com.xlend.util.PopupDialog;
import com.xlend.util.SelectedDateSpinner;
import com.xlend.util.SelectedNumberSpinner;
import com.xlend.util.Util;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.rmi.RemoteException;
import java.util.Date;
import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

public class EditQuotePanel extends RecordEditPanel {

    private JTextField idField;
    private JTextField orderNoField;
    private SelectedDateSpinner dateSP;
    private JComboBox companyCB;
    private JTextField companyAddressField;
    private Java2sAutoComboBox serviceTypeCB;
    private JComboBox contactPersonCB;
    private JTextField contactPhoneField;
    private JTextField contactEmailField;
    private DefaultComboBoxModel contactCbModel;
    private DefaultComboBoxModel companyCbModel;
    private JTextField bankAccHolderField;
    private JTextField bankField;
    private JTextField bankAccNoField;
    private JTextField bankBranchCodeField;
    private Java2sAutoComboBox bankAccTypeCB;
    private SelectedDateSpinner validDateSP;
    private SelectedNumberSpinner depositPercentSP;
    private SelectedNumberSpinner refDepositPercentSP;
    private SelectedNumberSpinner outBalanceWeeksSP;
    private Java2sAutoComboBox prefPayMethodCB;
    protected JLabel totalLabel;
    private JTextField docRefField;

    public EditQuotePanel(DbObject dbObject) {
        super(dbObject);
    }

    // should be overriden for EditInvoicePanel
    protected String docRefLabel() {
        return "Quote ref #:";
    }

    // should be overriden for EditInvoicePanel
    protected String validUntilLabel() {
        return "Quotes valid until:";
    }

    // should be overriden for EditInvoicePanel
    protected String tableName() {
        return "quote";
    }

    // should be overriden for EditInvoicePanel
    protected JPanel getPrintPanel(PopupDialog dlg) {
        return new DocumentPrintPanel(dlg, (Quote) getDbObject(), Quoteitem.class);
    }

    // should be overriden for EditInvoicePanel
    public void recalcTotal(Integer docID) {
        double total = 0.0;
        try {
            DbObject[] obs = XGrafWorks.getExchanger().getDbObjects(Quoteitem.class, "quote_id=" + docID, null);
            for (DbObject ob : obs) {
                Quoteitem itm = (Quoteitem) ob;
                total += (itm.getQty() * itm.getUnitPrice());
            }
        } catch (RemoteException ex) {
            XGrafWorks.logAndShowMessage(ex);
        }
        totalLabel.setText("R" + total);
    }

    @Override
    protected void fillContent() {
        String[] titles = {
            "ID:",
            docRefLabel(),
            "Order No:",
            "Date:",
            "<html><b>Banking </b></html>",
            "Acc holder:",
            "Bank:",
            "Branch Code:",
            "Account No:",
            "Account Type:",
            "<html><b>Terms & </b></html>",
            validUntilLabel(),
            "Deposit required to confirm an order,%:",
            "A refundable breakage deposit,%:",
            "Outstanding balance is payable prior to event, weeks:",
            "Preferred method of payment:",
            "",
            "<html><b>TOTAL   :</b></html>"
        };
        JLabel dtlLbl;
        JLabel termsLbl;
        JComponent[] edits = new JComponent[]{
            getGridPanel(idField = new JTextField(), 5),
            getGridPanel(docRefField = new JTextField(12), 2),
            getGridPanel(orderNoField = new JTextField(12), 2),
            getBorderPanel(new JComponent[]{
                dateSP = new SelectedDateSpinner(),
                new JPanel(), new JPanel()
            }),
            dtlLbl = new JLabel("Details"),
            bankAccHolderField = new JTextField(),
            bankField = new JTextField(),
            getGridPanel(bankBranchCodeField = new JTextField(), 3),
            getGridPanel(bankAccNoField = new JTextField(), 3),
            bankAccTypeCB = new Java2sAutoComboBox(XGrafWorks.loadDistinct(tableName(), "bank_acc_type")),
            termsLbl = new JLabel("Conditions"),
            getBorderPanel(new JComponent[]{
                validDateSP = new SelectedDateSpinner(),
                new JPanel(), new JPanel()
            }),
            getBorderPanel(new JComponent[]{
                depositPercentSP = new SelectedNumberSpinner(50, 0, 100, 1),
                new JPanel(), new JPanel()
            }),
            getBorderPanel(new JComponent[]{
                refDepositPercentSP = new SelectedNumberSpinner(25, 0, 100, 1),
                new JPanel(), new JPanel()
            }),
            getBorderPanel(new JComponent[]{
                outBalanceWeeksSP = new SelectedNumberSpinner(3, 0, 52, 1),
                new JPanel(), new JPanel()
            }),
            prefPayMethodCB = new Java2sAutoComboBox(XGrafWorks.loadDistinct(tableName(), "pref_pay_method")),
            new JPanel(),
            totalLabel = new JLabel("0.0")
        };
        Font font = dtlLbl.getFont();
        dtlLbl.setFont(new Font(font.getFontName(), Font.BOLD, font.getSize()));
        termsLbl.setFont(new Font(font.getFontName(), Font.BOLD, font.getSize()));
        idField.setEnabled(false);

        dateSP.setEditor(new JSpinner.DateEditor(dateSP, "dd/MM/yyyy"));
        Util.addFocusSelectAllAction(dateSP);
        validDateSP.setEditor(new JSpinner.DateEditor(validDateSP, "dd/MM/yyyy"));
        Util.addFocusSelectAllAction(validDateSP);

        bankAccTypeCB.setEditable(true);
        bankAccTypeCB.setStrict(false);
        prefPayMethodCB.setEditable(true);
        prefPayMethodCB.setStrict(false);

        organizePanels(titles, edits, null);

        MyJideTabbedPane detailsTab = new MyJideTabbedPane();
        if (getDbObject() != null) {
            try {
                detailsTab.add(getItmGrid((IDocument) getDbObject()), "Items");
            } catch (RemoteException ex) {
                XGrafWorks.logAndShowMessage(ex);
            }
        } else {
            detailsTab.add(new JLabel(" To add some items save first this record then open for editing"), "Items");
        }

        add(detailsTab, BorderLayout.CENTER);
    }

    protected GeneralGridPanel getItmGrid(IDocument q) throws RemoteException {
        QuoteitemGrid itmGrid = new QuoteitemGrid(XGrafWorks.getExchanger(), q.getPK_ID(), this);
        itmGrid.setPreferredSize(new Dimension(itmGrid.getPreferredSize().width, 300));
        return itmGrid;
    }

    @Override
    protected JComponent getRightUpperPanel() {
        JPanel rightUpperPanel = new JPanel(new BorderLayout());
        rightUpperPanel.setBorder(BorderFactory.createTitledBorder("Billing Information"));
        JPanel upLabelPanel = new JPanel(new GridLayout(13, 1, 5, 5));
        JPanel upEditPanel = new JPanel(new GridLayout(13, 1, 5, 5));
        rightUpperPanel.add(upLabelPanel, BorderLayout.WEST);
        rightUpperPanel.add(upEditPanel, BorderLayout.CENTER);

        upLabelPanel.add(new JLabel("Billing Contact:", SwingConstants.RIGHT));
        upLabelPanel.add(new JLabel("Billing Address:", SwingConstants.RIGHT));
        upLabelPanel.add(new JLabel("Contact Person:", SwingConstants.RIGHT));
        upLabelPanel.add(new JLabel("Contact Number:", SwingConstants.RIGHT));
        upLabelPanel.add(new JLabel("Contact E-mail:", SwingConstants.RIGHT));
        upLabelPanel.add(new JLabel("Service Type:", SwingConstants.RIGHT));
        upLabelPanel.add(new JPanel());
        upLabelPanel.add(new JPanel());
        upLabelPanel.add(new JPanel());
        upLabelPanel.add(new JPanel());
        upLabelPanel.add(new JPanel());
        upLabelPanel.add(new JPanel());
        upLabelPanel.add(new JPanel());

        companyCbModel = new DefaultComboBoxModel();
        for (ComboItem ci : XGrafWorks.loadAllCompanies()) {
            companyCbModel.addElement(ci);
        }
        contactCbModel = new DefaultComboBoxModel();

        upEditPanel.add(comboPanelWithLookupBtn(
                companyCB = new JComboBox(companyCbModel), new CompanyLookupAction(companyCB, contactCbModel))
        );
        upEditPanel.add(companyAddressField = new JTextField(30));
        upEditPanel.add(comboPanelWithLookupBtn(contactPersonCB = new JComboBox(contactCbModel),
                new ContactLookupAction(contactPersonCB, companyCB)));
        upEditPanel.add(contactPhoneField = new JTextField());
        upEditPanel.add(contactEmailField = new JTextField());
        upEditPanel.add(serviceTypeCB = new Java2sAutoComboBox(XGrafWorks.loadDistinct(tableName(), "service_type")));
        upEditPanel.add(new JPanel());
        upEditPanel.add(new JPanel());
        upEditPanel.add(new JPanel());
        upEditPanel.add(new JPanel());
        upEditPanel.add(new JPanel());
        upEditPanel.add(new JPanel());
        upEditPanel.add(new JPanel());

        companyAddressField.setEditable(false);
        contactPhoneField.setEditable(false);
        contactEmailField.setEditable(false);
        serviceTypeCB.setEditable(true);
        serviceTypeCB.setStrict(false);

        companyCB.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Integer companyID = getSelectedCbItem(companyCB);
                contactCbModel.removeAllElements();
                for (ComboItem ci : XGrafWorks.loadContactsOnCompany(companyID)) {
                    contactCbModel.addElement(ci);
                }
                try {
                    Company comp = (Company) XGrafWorks.getExchanger().loadDbObjectOnID(Company.class, companyID.intValue());
                    companyAddressField.setText(comp.getStreet() + " " + comp.getCity());
                } catch (RemoteException ex) {
                    XGrafWorks.logAndShowMessage(ex);
                }
            }
        });
        companyCB.setSelectedIndex(0);
        contactPersonCB.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Integer contactID = getSelectedCbItem(contactPersonCB);
                if (contactID != null) {
                    try {
                        Contact cont = (Contact) XGrafWorks.getExchanger().loadDbObjectOnID(Contact.class, contactID.intValue());
                        contactPhoneField.setText(cont.getPhone());
                        contactEmailField.setText(cont.getEmail()
                                + (cont.getEmail1() != null && !cont.getEmail1().isEmpty() ? ", " + cont.getEmail1() : ""));
                    } catch (RemoteException ex) {
                        XGrafWorks.logAndShowMessage(ex);
                    }
                }
            }
        });
        return rightUpperPanel;
    }

    @Override
    public void loadData() {
        IDocument q = (IDocument) getDbObject();
        if (q != null) {
            idField.setText(q.getPK_ID().toString());
            docRefField.setText(q.getDocRef());
            orderNoField.setText(q.getOrderNo());
            dateSP.setValue(new java.util.Date(q.getDocDate().getTime()));
            //TODO: load sub_total?
            bankField.setText(q.getBank());
            bankAccHolderField.setText(q.getBankAccHolder());
            bankBranchCodeField.setText(q.getBankBranchCode());
            bankAccNoField.setText(q.getBankAccNo());
            bankAccTypeCB.setSelectedItem(q.getBankAccType());
            selectComboItem(companyCB, q.getCompanyId());
            selectComboItem(contactPersonCB, q.getContactId());
            serviceTypeCB.setSelectedItem(q.getServiceType());
            validDateSP.setValue(new java.util.Date(q.getValidTerm().getTime()));
            depositPercentSP.setValue(q.getDepositPercent());
            refDepositPercentSP.setValue(q.getRefundBreakPercent());
            outBalanceWeeksSP.setValue(q.getOutbalanceWeeks());
            prefPayMethodCB.setSelectedItem(q.getPrefPayMethod());
            recalcTotal(q.getPK_ID());
        }
    }

    @Override
    public boolean save() throws Exception {
        IDocument doc = (IDocument) getDbObject();
        boolean isNew = (doc == null);
        if (isNew) {
            doc = (this instanceof EditInvoicePanel ? new Invoice(null) : new Quote(null));
            doc.setPK_ID(0);
        }
        doc.setDocRef(docRefField.getText());
        doc.setOrderNo(orderNoField.getText());
        java.util.Date dt = (java.util.Date) dateSP.getValue();
        doc.setDocDate(new java.sql.Date(dt.getTime()));
        doc.setBank(bankField.getText());
        doc.setBankAccHolder(bankAccHolderField.getText());
        doc.setBankBranchCode(bankBranchCodeField.getText());
        doc.setBankAccNo(bankAccNoField.getText());
        doc.setBankAccType((String) bankAccTypeCB.getSelectedItem());
        doc.setCompanyId(getSelectedCbItem(companyCB));
        doc.setContactId(getSelectedCbItem(contactPersonCB));
        doc.setServiceType((String) serviceTypeCB.getSelectedItem());
        dt = (Date) validDateSP.getValue();
        doc.setValidTerm(new java.sql.Date(dt.getTime()));
        doc.setDepositPercent((Integer) depositPercentSP.getValue());
        doc.setRefundBreakPercent((Integer) refDepositPercentSP.getValue());
        doc.setOutbalanceWeeks((Integer) outBalanceWeeksSP.getValue());
        doc.setPrefPayMethod((String) prefPayMethodCB.getSelectedItem());
        doc.setIsProforma(getIsPerform());
        doc.setSubTotal(Double.parseDouble(totalLabel.getText().substring(1)));
        return saveDbRecord((DbObject) doc, isNew);
    }

    AbstractAction printAction() {
        return new AbstractAction("Print", new ImageIcon(XGrafWorks.loadImage("printform.png", EditRecordDialog.class))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                new PopupDialog(null, "Print preview", getDbObject()) {
                    @Override
                    protected Color getHeaderBackground() {
                        return XGrafWorks.HDR_COLOR;
                    }

                    @Override
                    protected void fillContent() {
                        super.fillContent();
                        getContentPane().add(getPrintPanel(this), BorderLayout.CENTER);
                        setPreferredSize(new Dimension(750, 700));
                    }
                };
            }
        };
    }

    protected Integer getIsPerform() {
        return 0;
    }
}
