// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Wed Oct 28 09:16:15 EET 2015
// generated file: do not modify
package com.xgraf.orm;

import com.xgraf.orm.dbobject.DbObject;
import com.xgraf.orm.dbobject.ForeignKeyViolationException;
import com.xgraf.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Company extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer companyId = null;
    private String name = null;
    private String tradingAs = null;
    private String street = null;
    private String areaPobox = null;
    private String city = null;
    private String postcode = null;
    private String regNo = null;
    private String vatNo = null;
    private String comments = null;
    private Object logo = null;

    public Company(Connection connection) {
        super(connection, "company", "company_id");
        setColumnNames(new String[]{"company_id", "name", "trading_as", "street", "area_pobox", "city", "postcode", "reg_no", "vat_no", "comments", "logo"});
    }

    public Company(Connection connection, Integer companyId, String name, String tradingAs, String street, String areaPobox, String city, String postcode, String regNo, String vatNo, String comments, Object logo) {
        super(connection, "company", "company_id");
        setNew(companyId.intValue() <= 0);
//        if (companyId.intValue() != 0) {
            this.companyId = companyId;
//        }
        this.name = name;
        this.tradingAs = tradingAs;
        this.street = street;
        this.areaPobox = areaPobox;
        this.city = city;
        this.postcode = postcode;
        this.regNo = regNo;
        this.vatNo = vatNo;
        this.comments = comments;
        this.logo = logo;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Company company = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT company_id,name,trading_as,street,area_pobox,city,postcode,reg_no,vat_no,comments,logo FROM company WHERE company_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                company = new Company(getConnection());
                company.setCompanyId(new Integer(rs.getInt(1)));
                company.setName(rs.getString(2));
                company.setTradingAs(rs.getString(3));
                company.setStreet(rs.getString(4));
                company.setAreaPobox(rs.getString(5));
                company.setCity(rs.getString(6));
                company.setPostcode(rs.getString(7));
                company.setRegNo(rs.getString(8));
                company.setVatNo(rs.getString(9));
                company.setComments(rs.getString(10));
                company.setLogo(rs.getObject(11));
                company.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return company;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO company ("+(getCompanyId().intValue()!=0?"company_id,":"")+"name,trading_as,street,area_pobox,city,postcode,reg_no,vat_no,comments,logo) values("+(getCompanyId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getCompanyId().intValue()!=0) {
                 ps.setObject(++n, getCompanyId());
             }
             ps.setObject(++n, getName());
             ps.setObject(++n, getTradingAs());
             ps.setObject(++n, getStreet());
             ps.setObject(++n, getAreaPobox());
             ps.setObject(++n, getCity());
             ps.setObject(++n, getPostcode());
             ps.setObject(++n, getRegNo());
             ps.setObject(++n, getVatNo());
             ps.setObject(++n, getComments());
             ps.setObject(++n, getLogo());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getCompanyId().intValue()==0) {
             stmt = "SELECT max(company_id) FROM company";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setCompanyId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE company " +
                    "SET name = ?, trading_as = ?, street = ?, area_pobox = ?, city = ?, postcode = ?, reg_no = ?, vat_no = ?, comments = ?, logo = ?" + 
                    " WHERE company_id = " + getCompanyId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getName());
                ps.setObject(2, getTradingAs());
                ps.setObject(3, getStreet());
                ps.setObject(4, getAreaPobox());
                ps.setObject(5, getCity());
                ps.setObject(6, getPostcode());
                ps.setObject(7, getRegNo());
                ps.setObject(8, getVatNo());
                ps.setObject(9, getComments());
                ps.setObject(10, getLogo());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (Statement.exists(getConnection(),"company_id = " + getCompanyId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: statement_company_fk");
        }
        if (Invoice.exists(getConnection(),"company_id = " + getCompanyId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: invoice_company_fk");
        }
        if (Quote.exists(getConnection(),"company_id = " + getCompanyId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: quote_company_fk");
        }
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        {// delete cascade from contact
            Contact[] records = (Contact[])Contact.load(getConnection(),"company_id = " + getCompanyId(),null);
            for (int i = 0; i<records.length; i++) {
                Contact contact = records[i];
                contact.delete();
            }
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM company " +
                "WHERE company_id = " + getCompanyId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setCompanyId(new Integer(-getCompanyId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getCompanyId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT company_id,name,trading_as,street,area_pobox,city,postcode,reg_no,vat_no,comments,logo FROM company " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Company(con,new Integer(rs.getInt(1)),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),rs.getString(7),rs.getString(8),rs.getString(9),rs.getString(10),rs.getObject(11)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Company[] objects = new Company[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Company company = (Company) lst.get(i);
            objects[i] = company;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT company_id FROM company " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getCompanyId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return companyId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setCompanyId(id);
        setNew(prevIsNew);
    }

    public Integer getCompanyId() {
        return companyId;
    }

    public void setCompanyId(Integer companyId) throws ForeignKeyViolationException {
        setWasChanged(this.companyId != null && this.companyId != companyId);
        this.companyId = companyId;
        setNew(companyId.intValue() == 0);
    }

    public String getName() {
        return name;
    }

    public void setName(String name) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.name != null && !this.name.equals(name));
        this.name = name;
    }

    public String getTradingAs() {
        return tradingAs;
    }

    public void setTradingAs(String tradingAs) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.tradingAs != null && !this.tradingAs.equals(tradingAs));
        this.tradingAs = tradingAs;
    }

    public String getStreet() {
        return street;
    }

    public void setStreet(String street) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.street != null && !this.street.equals(street));
        this.street = street;
    }

    public String getAreaPobox() {
        return areaPobox;
    }

    public void setAreaPobox(String areaPobox) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.areaPobox != null && !this.areaPobox.equals(areaPobox));
        this.areaPobox = areaPobox;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.city != null && !this.city.equals(city));
        this.city = city;
    }

    public String getPostcode() {
        return postcode;
    }

    public void setPostcode(String postcode) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.postcode != null && !this.postcode.equals(postcode));
        this.postcode = postcode;
    }

    public String getRegNo() {
        return regNo;
    }

    public void setRegNo(String regNo) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.regNo != null && !this.regNo.equals(regNo));
        this.regNo = regNo;
    }

    public String getVatNo() {
        return vatNo;
    }

    public void setVatNo(String vatNo) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.vatNo != null && !this.vatNo.equals(vatNo));
        this.vatNo = vatNo;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.comments != null && !this.comments.equals(comments));
        this.comments = comments;
    }

    public Object getLogo() {
        return logo;
    }

    public void setLogo(Object logo) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.logo != null && !this.logo.equals(logo));
        this.logo = logo;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[11];
        columnValues[0] = getCompanyId();
        columnValues[1] = getName();
        columnValues[2] = getTradingAs();
        columnValues[3] = getStreet();
        columnValues[4] = getAreaPobox();
        columnValues[5] = getCity();
        columnValues[6] = getPostcode();
        columnValues[7] = getRegNo();
        columnValues[8] = getVatNo();
        columnValues[9] = getComments();
        columnValues[10] = getLogo();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setCompanyId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setCompanyId(null);
        }
        setName(flds[1]);
        setTradingAs(flds[2]);
        setStreet(flds[3]);
        setAreaPobox(flds[4]);
        setCity(flds[5]);
        setPostcode(flds[6]);
        setRegNo(flds[7]);
        setVatNo(flds[8]);
        setComments(flds[9]);
        setLogo(flds[10]);
    }
}
