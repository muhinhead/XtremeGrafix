// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Mon Aug 31 13:22:38 EEST 2015
// generated file: do not modify
package com.xgraf.orm;

import com.xgraf.orm.dbobject.DbObject;
import com.xgraf.orm.dbobject.ForeignKeyViolationException;
import com.xgraf.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Contact extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer contactId = null;
    private String name = null;
    private String phone = null;
    private String email = null;
    private String email1 = null;
    private String comments = null;

    public Contact(Connection connection) {
        super(connection, "contact", "contact_id");
        setColumnNames(new String[]{"contact_id", "name", "phone", "email", "email1", "comments"});
    }

    public Contact(Connection connection, Integer contactId, String name, String phone, String email, String email1, String comments) {
        super(connection, "contact", "contact_id");
        setNew(contactId.intValue() <= 0);
//        if (contactId.intValue() != 0) {
            this.contactId = contactId;
//        }
        this.name = name;
        this.phone = phone;
        this.email = email;
        this.email1 = email1;
        this.comments = comments;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Contact contact = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT contact_id,name,phone,email,email1,comments FROM contact WHERE contact_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                contact = new Contact(getConnection());
                contact.setContactId(new Integer(rs.getInt(1)));
                contact.setName(rs.getString(2));
                contact.setPhone(rs.getString(3));
                contact.setEmail(rs.getString(4));
                contact.setEmail1(rs.getString(5));
                contact.setComments(rs.getString(6));
                contact.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return contact;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO contact ("+(getContactId().intValue()!=0?"contact_id,":"")+"name,phone,email,email1,comments) values("+(getContactId().intValue()!=0?"?,":"")+"?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getContactId().intValue()!=0) {
                 ps.setObject(++n, getContactId());
             }
             ps.setObject(++n, getName());
             ps.setObject(++n, getPhone());
             ps.setObject(++n, getEmail());
             ps.setObject(++n, getEmail1());
             ps.setObject(++n, getComments());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getContactId().intValue()==0) {
             stmt = "SELECT max(contact_id) FROM contact";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setContactId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE contact " +
                    "SET name = ?, phone = ?, email = ?, email1 = ?, comments = ?" + 
                    " WHERE contact_id = " + getContactId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getName());
                ps.setObject(2, getPhone());
                ps.setObject(3, getEmail());
                ps.setObject(4, getEmail1());
                ps.setObject(5, getComments());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM contact " +
                "WHERE contact_id = " + getContactId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setContactId(new Integer(-getContactId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getContactId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT contact_id,name,phone,email,email1,comments FROM contact " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Contact(con,new Integer(rs.getInt(1)),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Contact[] objects = new Contact[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Contact contact = (Contact) lst.get(i);
            objects[i] = contact;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT contact_id FROM contact " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getContactId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return contactId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setContactId(id);
        setNew(prevIsNew);
    }

    public Integer getContactId() {
        return contactId;
    }

    public void setContactId(Integer contactId) throws ForeignKeyViolationException {
        setWasChanged(this.contactId != null && this.contactId != contactId);
        this.contactId = contactId;
        setNew(contactId.intValue() == 0);
    }

    public String getName() {
        return name;
    }

    public void setName(String name) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.name != null && !this.name.equals(name));
        this.name = name;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.phone != null && !this.phone.equals(phone));
        this.phone = phone;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.email != null && !this.email.equals(email));
        this.email = email;
    }

    public String getEmail1() {
        return email1;
    }

    public void setEmail1(String email1) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.email1 != null && !this.email1.equals(email1));
        this.email1 = email1;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.comments != null && !this.comments.equals(comments));
        this.comments = comments;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[6];
        columnValues[0] = getContactId();
        columnValues[1] = getName();
        columnValues[2] = getPhone();
        columnValues[3] = getEmail();
        columnValues[4] = getEmail1();
        columnValues[5] = getComments();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setContactId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setContactId(null);
        }
        setName(flds[1]);
        setPhone(flds[2]);
        setEmail(flds[3]);
        setEmail1(flds[4]);
        setComments(flds[5]);
    }
}
