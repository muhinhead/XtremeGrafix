// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sat Oct 24 16:51:21 EEST 2015
// generated file: do not modify
package com.xgraf.orm;

import com.xgraf.orm.dbobject.DbObject;
import com.xgraf.orm.dbobject.ForeignKeyViolationException;
import com.xgraf.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Invoiceitem extends DbObject implements IDocumentItem {

    private static Triggers activeTriggers = null;
    private Integer invoiceitemId = null;
    private Integer invoiceId = null;
    private String descr = null;
    private Integer qty = null;
    private Double unitPrice = null;

    public Invoiceitem(Connection connection) {
        super(connection, "invoiceitem", "invoiceitem_id");
        setColumnNames(new String[]{"invoiceitem_id", "invoice_id", "descr", "qty", "unit_price"});
    }

    public Invoiceitem(Connection connection, Integer invoiceitemId, Integer invoiceId, String descr, Integer qty, Double unitPrice) {
        super(connection, "invoiceitem", "invoiceitem_id");
        setNew(invoiceitemId.intValue() <= 0);
//        if (invoiceitemId.intValue() != 0) {
        this.invoiceitemId = invoiceitemId;
//        }
        this.invoiceId = invoiceId;
        this.descr = descr;
        this.qty = qty;
        this.unitPrice = unitPrice;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Invoiceitem invoiceitem = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT invoiceitem_id,invoice_id,descr,qty,unit_price FROM invoiceitem WHERE invoiceitem_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                invoiceitem = new Invoiceitem(getConnection());
                invoiceitem.setInvoiceitemId(new Integer(rs.getInt(1)));
                invoiceitem.setInvoiceId(new Integer(rs.getInt(2)));
                invoiceitem.setDescr(rs.getString(3));
                invoiceitem.setQty(new Integer(rs.getInt(4)));
                invoiceitem.setUnitPrice(rs.getDouble(5));
                invoiceitem.setNew(false);
            }
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } finally {
                if (ps != null) {
                    ps.close();
                }
            }
        }
        return invoiceitem;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeInsert(this);
        }
        PreparedStatement ps = null;
        String stmt
                = "INSERT INTO invoiceitem (" + (getInvoiceitemId().intValue() != 0 ? "invoiceitem_id," : "") + "invoice_id,descr,qty,unit_price) values(" + (getInvoiceitemId().intValue() != 0 ? "?," : "") + "?,?,?,?)";
        try {
            ps = getConnection().prepareStatement(stmt);
            int n = 0;
            if (getInvoiceitemId().intValue() != 0) {
                ps.setObject(++n, getInvoiceitemId());
            }
            ps.setObject(++n, getInvoiceId());
            ps.setObject(++n, getDescr());
            ps.setObject(++n, getQty());
            ps.setObject(++n, getUnitPrice());
            ps.execute();
        } finally {
            if (ps != null) {
                ps.close();
            }
        }
        ResultSet rs = null;
        if (getInvoiceitemId().intValue() == 0) {
            stmt = "SELECT max(invoiceitem_id) FROM invoiceitem";
            try {
                ps = getConnection().prepareStatement(stmt);
                rs = ps.executeQuery();
                if (rs.next()) {
                    setInvoiceitemId(new Integer(rs.getInt(1)));
                }
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                } finally {
                    if (ps != null) {
                        ps.close();
                    }
                }
            }
        }
        setNew(false);
        setWasChanged(false);
        if (getTriggers() != null) {
            getTriggers().afterInsert(this);
        }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt
                    = "UPDATE invoiceitem "
                    + "SET invoice_id = ?, descr = ?, qty = ?, unit_price = ?"
                    + " WHERE invoiceitem_id = " + getInvoiceitemId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getInvoiceId());
                ps.setObject(2, getDescr());
                ps.setObject(3, getQty());
                ps.setObject(4, getUnitPrice());
                ps.execute();
            } finally {
                if (ps != null) {
                    ps.close();
                }
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt
                = "DELETE FROM invoiceitem "
                + "WHERE invoiceitem_id = " + getInvoiceitemId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) {
                ps.close();
            }
        }
        setInvoiceitemId(new Integer(-getInvoiceitemId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getInvoiceitemId().intValue() < 0);
    }

    public static DbObject[] load(Connection con, String whereCondition, String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT invoiceitem_id,invoice_id,descr,qty,unit_price FROM invoiceitem "
                + ((whereCondition != null && whereCondition.length() > 0)
                        ? " WHERE " + whereCondition : "")
                + ((orderCondition != null && orderCondition.length() > 0)
                        ? " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj = new Invoiceitem(con, new Integer(rs.getInt(1)), new Integer(rs.getInt(2)), rs.getString(3), new Integer(rs.getInt(4)), rs.getDouble(5)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } finally {
                if (ps != null) {
                    ps.close();
                }
            }
        }
        Invoiceitem[] objects = new Invoiceitem[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Invoiceitem invoiceitem = (Invoiceitem) lst.get(i);
            objects[i] = invoiceitem;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT invoiceitem_id FROM invoiceitem "
                + ((whereCondition != null && whereCondition.length() > 0)
                        ? "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } finally {
                if (ps != null) {
                    ps.close();
                }
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getInvoiceitemId() + getDelimiter();
    //}
    public Integer getPK_ID() {
        return invoiceitemId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setInvoiceitemId(id);
        setNew(prevIsNew);
    }

    public Integer getInvoiceitemId() {
        return invoiceitemId;
    }

    public void setInvoiceitemId(Integer invoiceitemId) throws ForeignKeyViolationException {
        setWasChanged(this.invoiceitemId != null && this.invoiceitemId != invoiceitemId);
        this.invoiceitemId = invoiceitemId;
        setNew(invoiceitemId.intValue() == 0);
    }

    public Integer getInvoiceId() {
        return invoiceId;
    }

    public void setInvoiceId(Integer invoiceId) throws SQLException, ForeignKeyViolationException {
        if (invoiceId != null && !Invoice.exists(getConnection(), "invoice_id = " + invoiceId)) {
            throw new ForeignKeyViolationException("Can't set invoice_id, foreign key violation: invoiceitem_invoice_fk");
        }
        setWasChanged(this.invoiceId != null && !this.invoiceId.equals(invoiceId));
        this.invoiceId = invoiceId;
    }

    public String getDescr() {
        return descr;
    }

    public void setDescr(String descr) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.descr != null && !this.descr.equals(descr));
        this.descr = descr;
    }

    public Integer getQty() {
        return qty;
    }

    public void setQty(Integer qty) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.qty != null && !this.qty.equals(qty));
        this.qty = qty;
    }

    public Double getUnitPrice() {
        return unitPrice;
    }

    public void setUnitPrice(Double unitPrice) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.unitPrice != null && !this.unitPrice.equals(unitPrice));
        this.unitPrice = unitPrice;
    }

    public Object[] getAsRow() {
        Object[] columnValues = new Object[5];
        columnValues[0] = getInvoiceitemId();
        columnValues[1] = getInvoiceId();
        columnValues[2] = getDescr();
        columnValues[3] = getQty();
        columnValues[4] = getUnitPrice();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setInvoiceitemId(Integer.parseInt(flds[0]));
        } catch (NumberFormatException ne) {
            setInvoiceitemId(null);
        }
        try {
            setInvoiceId(Integer.parseInt(flds[1]));
        } catch (NumberFormatException ne) {
            setInvoiceId(null);
        }
        setDescr(flds[2]);
        try {
            setQty(Integer.parseInt(flds[3]));
        } catch (NumberFormatException ne) {
            setQty(null);
        }
        try {
            setUnitPrice(Double.parseDouble(flds[4]));
        } catch (NumberFormatException ne) {
            setUnitPrice(null);
        }
    }

    @Override
    public Integer getDocId() {
        return getInvoiceId();
    }

    @Override
    public void setDocId(Integer id) throws SQLException, ForeignKeyViolationException {
        setInvoiceId(id);
    }
}
