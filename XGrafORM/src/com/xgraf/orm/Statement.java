// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Wed Oct 28 09:16:15 EET 2015
// generated file: do not modify
package com.xgraf.orm;

import com.xgraf.orm.dbobject.DbObject;
import com.xgraf.orm.dbobject.ForeignKeyViolationException;
import com.xgraf.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Statement extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer statementId = null;
    private Integer companyId = null;
    private Integer contactId = null;
    private String statementRef = null;
    private Date statementDate = null;
    private Double outstandingBalance = null;
    private String bankAccHolder = null;
    private String bank = null;
    private String bankBranchCode = null;
    private String bankAccNo = null;
    private String bankAccType = null;
    private Integer paymentDue = null;

    public Statement(Connection connection) {
        super(connection, "statement", "statement_id");
        setColumnNames(new String[]{"statement_id", "company_id", "contact_id", "statement_ref", "statement_date", "outstanding_balance", "bank_acc_holder", "bank", "bank_branch_code", "bank_acc_no", "bank_acc_type", "payment_due"});
    }

    public Statement(Connection connection, Integer statementId, Integer companyId, Integer contactId, String statementRef, Date statementDate, Double outstandingBalance, String bankAccHolder, String bank, String bankBranchCode, String bankAccNo, String bankAccType, Integer paymentDue) {
        super(connection, "statement", "statement_id");
        setNew(statementId.intValue() <= 0);
//        if (statementId.intValue() != 0) {
            this.statementId = statementId;
//        }
        this.companyId = companyId;
        this.contactId = contactId;
        this.statementRef = statementRef;
        this.statementDate = statementDate;
        this.outstandingBalance = outstandingBalance;
        this.bankAccHolder = bankAccHolder;
        this.bank = bank;
        this.bankBranchCode = bankBranchCode;
        this.bankAccNo = bankAccNo;
        this.bankAccType = bankAccType;
        this.paymentDue = paymentDue;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Statement statement = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT statement_id,company_id,contact_id,statement_ref,statement_date,outstanding_balance,bank_acc_holder,bank,bank_branch_code,bank_acc_no,bank_acc_type,payment_due FROM statement WHERE statement_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                statement = new Statement(getConnection());
                statement.setStatementId(new Integer(rs.getInt(1)));
                statement.setCompanyId(new Integer(rs.getInt(2)));
                statement.setContactId(new Integer(rs.getInt(3)));
                statement.setStatementRef(rs.getString(4));
                statement.setStatementDate(rs.getDate(5));
                statement.setOutstandingBalance(rs.getDouble(6));
                statement.setBankAccHolder(rs.getString(7));
                statement.setBank(rs.getString(8));
                statement.setBankBranchCode(rs.getString(9));
                statement.setBankAccNo(rs.getString(10));
                statement.setBankAccType(rs.getString(11));
                statement.setPaymentDue(new Integer(rs.getInt(12)));
                statement.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return statement;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO statement ("+(getStatementId().intValue()!=0?"statement_id,":"")+"company_id,contact_id,statement_ref,statement_date,outstanding_balance,bank_acc_holder,bank,bank_branch_code,bank_acc_no,bank_acc_type,payment_due) values("+(getStatementId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getStatementId().intValue()!=0) {
                 ps.setObject(++n, getStatementId());
             }
             ps.setObject(++n, getCompanyId());
             ps.setObject(++n, getContactId());
             ps.setObject(++n, getStatementRef());
             ps.setObject(++n, getStatementDate());
             ps.setObject(++n, getOutstandingBalance());
             ps.setObject(++n, getBankAccHolder());
             ps.setObject(++n, getBank());
             ps.setObject(++n, getBankBranchCode());
             ps.setObject(++n, getBankAccNo());
             ps.setObject(++n, getBankAccType());
             ps.setObject(++n, getPaymentDue());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getStatementId().intValue()==0) {
             stmt = "SELECT max(statement_id) FROM statement";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setStatementId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE statement " +
                    "SET company_id = ?, contact_id = ?, statement_ref = ?, statement_date = ?, outstanding_balance = ?, bank_acc_holder = ?, bank = ?, bank_branch_code = ?, bank_acc_no = ?, bank_acc_type = ?, payment_due = ?" + 
                    " WHERE statement_id = " + getStatementId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getCompanyId());
                ps.setObject(2, getContactId());
                ps.setObject(3, getStatementRef());
                ps.setObject(4, getStatementDate());
                ps.setObject(5, getOutstandingBalance());
                ps.setObject(6, getBankAccHolder());
                ps.setObject(7, getBank());
                ps.setObject(8, getBankBranchCode());
                ps.setObject(9, getBankAccNo());
                ps.setObject(10, getBankAccType());
                ps.setObject(11, getPaymentDue());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (Statementitem.exists(getConnection(),"statement_id = " + getStatementId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: statementitem_statement_fk");
        }
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM statement " +
                "WHERE statement_id = " + getStatementId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setStatementId(new Integer(-getStatementId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getStatementId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT statement_id,company_id,contact_id,statement_ref,statement_date,outstanding_balance,bank_acc_holder,bank,bank_branch_code,bank_acc_no,bank_acc_type,payment_due FROM statement " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Statement(con,new Integer(rs.getInt(1)),new Integer(rs.getInt(2)),new Integer(rs.getInt(3)),rs.getString(4),rs.getDate(5),rs.getDouble(6),rs.getString(7),rs.getString(8),rs.getString(9),rs.getString(10),rs.getString(11),new Integer(rs.getInt(12))));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Statement[] objects = new Statement[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Statement statement = (Statement) lst.get(i);
            objects[i] = statement;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT statement_id FROM statement " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getStatementId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return statementId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setStatementId(id);
        setNew(prevIsNew);
    }

    public Integer getStatementId() {
        return statementId;
    }

    public void setStatementId(Integer statementId) throws ForeignKeyViolationException {
        setWasChanged(this.statementId != null && this.statementId != statementId);
        this.statementId = statementId;
        setNew(statementId.intValue() == 0);
    }

    public Integer getCompanyId() {
        return companyId;
    }

    public void setCompanyId(Integer companyId) throws SQLException, ForeignKeyViolationException {
        if (companyId!=null && !Company.exists(getConnection(),"company_id = " + companyId)) {
            throw new ForeignKeyViolationException("Can't set company_id, foreign key violation: statement_company_fk");
        }
        setWasChanged(this.companyId != null && !this.companyId.equals(companyId));
        this.companyId = companyId;
    }

    public Integer getContactId() {
        return contactId;
    }

    public void setContactId(Integer contactId) throws SQLException, ForeignKeyViolationException {
        if (contactId!=null && !Contact.exists(getConnection(),"contact_id = " + contactId)) {
            throw new ForeignKeyViolationException("Can't set contact_id, foreign key violation: statement_contact_fk");
        }
        setWasChanged(this.contactId != null && !this.contactId.equals(contactId));
        this.contactId = contactId;
    }

    public String getStatementRef() {
        return statementRef;
    }

    public void setStatementRef(String statementRef) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.statementRef != null && !this.statementRef.equals(statementRef));
        this.statementRef = statementRef;
    }

    public Date getStatementDate() {
        return statementDate;
    }

    public void setStatementDate(Date statementDate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.statementDate != null && !this.statementDate.equals(statementDate));
        this.statementDate = statementDate;
    }

    public Double getOutstandingBalance() {
        return outstandingBalance;
    }

    public void setOutstandingBalance(Double outstandingBalance) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.outstandingBalance != null && !this.outstandingBalance.equals(outstandingBalance));
        this.outstandingBalance = outstandingBalance;
    }

    public String getBankAccHolder() {
        return bankAccHolder;
    }

    public void setBankAccHolder(String bankAccHolder) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.bankAccHolder != null && !this.bankAccHolder.equals(bankAccHolder));
        this.bankAccHolder = bankAccHolder;
    }

    public String getBank() {
        return bank;
    }

    public void setBank(String bank) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.bank != null && !this.bank.equals(bank));
        this.bank = bank;
    }

    public String getBankBranchCode() {
        return bankBranchCode;
    }

    public void setBankBranchCode(String bankBranchCode) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.bankBranchCode != null && !this.bankBranchCode.equals(bankBranchCode));
        this.bankBranchCode = bankBranchCode;
    }

    public String getBankAccNo() {
        return bankAccNo;
    }

    public void setBankAccNo(String bankAccNo) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.bankAccNo != null && !this.bankAccNo.equals(bankAccNo));
        this.bankAccNo = bankAccNo;
    }

    public String getBankAccType() {
        return bankAccType;
    }

    public void setBankAccType(String bankAccType) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.bankAccType != null && !this.bankAccType.equals(bankAccType));
        this.bankAccType = bankAccType;
    }

    public Integer getPaymentDue() {
        return paymentDue;
    }

    public void setPaymentDue(Integer paymentDue) throws SQLException, ForeignKeyViolationException {
        if (null != paymentDue)
            paymentDue = paymentDue == 0 ? null : paymentDue;
        setWasChanged(this.paymentDue != null && !this.paymentDue.equals(paymentDue));
        this.paymentDue = paymentDue;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[12];
        columnValues[0] = getStatementId();
        columnValues[1] = getCompanyId();
        columnValues[2] = getContactId();
        columnValues[3] = getStatementRef();
        columnValues[4] = getStatementDate();
        columnValues[5] = getOutstandingBalance();
        columnValues[6] = getBankAccHolder();
        columnValues[7] = getBank();
        columnValues[8] = getBankBranchCode();
        columnValues[9] = getBankAccNo();
        columnValues[10] = getBankAccType();
        columnValues[11] = getPaymentDue();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setStatementId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setStatementId(null);
        }
        try {
            setCompanyId(Integer.parseInt(flds[1]));
        } catch(NumberFormatException ne) {
            setCompanyId(null);
        }
        try {
            setContactId(Integer.parseInt(flds[2]));
        } catch(NumberFormatException ne) {
            setContactId(null);
        }
        setStatementRef(flds[3]);
        setStatementDate(toDate(flds[4]));
        try {
            setOutstandingBalance(Double.parseDouble(flds[5]));
        } catch(NumberFormatException ne) {
            setOutstandingBalance(null);
        }
        setBankAccHolder(flds[6]);
        setBank(flds[7]);
        setBankBranchCode(flds[8]);
        setBankAccNo(flds[9]);
        setBankAccType(flds[10]);
        try {
            setPaymentDue(Integer.parseInt(flds[11]));
        } catch(NumberFormatException ne) {
            setPaymentDue(null);
        }
    }
}
