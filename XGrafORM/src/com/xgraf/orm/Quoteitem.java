// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sun Nov 01 10:53:35 EET 2015
// generated file: do not modify
package com.xgraf.orm;

import com.xgraf.orm.dbobject.DbObject;
import com.xgraf.orm.dbobject.ForeignKeyViolationException;
import com.xgraf.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Quoteitem extends DbObject implements IDocumentItem {
    private static Triggers activeTriggers = null;
    private Integer quoteitemId = null;
    private Integer quoteId = null;
    private String descr = null;
    private Integer qty = null;
    private Double unitPrice = null;

    public Quoteitem(Connection connection) {
        super(connection, "quoteitem", "quoteitem_id");
        setColumnNames(new String[]{"quoteitem_id", "quote_id", "descr", "qty", "unit_price"});
    }

    public Quoteitem(Connection connection, Integer quoteitemId, Integer quoteId, String descr, Integer qty, Double unitPrice) {
        super(connection, "quoteitem", "quoteitem_id");
        setNew(quoteitemId.intValue() <= 0);
//        if (quoteitemId.intValue() != 0) {
            this.quoteitemId = quoteitemId;
//        }
        this.quoteId = quoteId;
        this.descr = descr;
        this.qty = qty;
        this.unitPrice = unitPrice;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Quoteitem quoteitem = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT quoteitem_id,quote_id,descr,qty,unit_price FROM quoteitem WHERE quoteitem_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                quoteitem = new Quoteitem(getConnection());
                quoteitem.setQuoteitemId(new Integer(rs.getInt(1)));
                quoteitem.setQuoteId(new Integer(rs.getInt(2)));
                quoteitem.setDescr(rs.getString(3));
                quoteitem.setQty(new Integer(rs.getInt(4)));
                quoteitem.setUnitPrice(rs.getDouble(5));
                quoteitem.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return quoteitem;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO quoteitem ("+(getQuoteitemId().intValue()!=0?"quoteitem_id,":"")+"quote_id,descr,qty,unit_price) values("+(getQuoteitemId().intValue()!=0?"?,":"")+"?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getQuoteitemId().intValue()!=0) {
                 ps.setObject(++n, getQuoteitemId());
             }
             ps.setObject(++n, getQuoteId());
             ps.setObject(++n, getDescr());
             ps.setObject(++n, getQty());
             ps.setObject(++n, getUnitPrice());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getQuoteitemId().intValue()==0) {
             stmt = "SELECT max(quoteitem_id) FROM quoteitem";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setQuoteitemId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE quoteitem " +
                    "SET quote_id = ?, descr = ?, qty = ?, unit_price = ?" + 
                    " WHERE quoteitem_id = " + getQuoteitemId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getQuoteId());
                ps.setObject(2, getDescr());
                ps.setObject(3, getQty());
                ps.setObject(4, getUnitPrice());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM quoteitem " +
                "WHERE quoteitem_id = " + getQuoteitemId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setQuoteitemId(new Integer(-getQuoteitemId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getQuoteitemId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT quoteitem_id,quote_id,descr,qty,unit_price FROM quoteitem " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Quoteitem(con,new Integer(rs.getInt(1)),new Integer(rs.getInt(2)),rs.getString(3),new Integer(rs.getInt(4)),rs.getDouble(5)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Quoteitem[] objects = new Quoteitem[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Quoteitem quoteitem = (Quoteitem) lst.get(i);
            objects[i] = quoteitem;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT quoteitem_id FROM quoteitem " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getQuoteitemId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return quoteitemId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setQuoteitemId(id);
        setNew(prevIsNew);
    }

    public Integer getQuoteitemId() {
        return quoteitemId;
    }

    public void setQuoteitemId(Integer quoteitemId) throws ForeignKeyViolationException {
        setWasChanged(this.quoteitemId != null && this.quoteitemId != quoteitemId);
        this.quoteitemId = quoteitemId;
        setNew(quoteitemId.intValue() == 0);
    }

    public Integer getQuoteId() {
        return quoteId;
    }

    public void setQuoteId(Integer quoteId) throws SQLException, ForeignKeyViolationException {
        if (quoteId!=null && !Quote.exists(getConnection(),"quote_id = " + quoteId)) {
            throw new ForeignKeyViolationException("Can't set quote_id, foreign key violation: quoteitem_quote_fk");
        }
        setWasChanged(this.quoteId != null && !this.quoteId.equals(quoteId));
        this.quoteId = quoteId;
    }

    public String getDescr() {
        return descr;
    }

    public void setDescr(String descr) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.descr != null && !this.descr.equals(descr));
        this.descr = descr;
    }

    public Integer getQty() {
        return qty;
    }

    public void setQty(Integer qty) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.qty != null && !this.qty.equals(qty));
        this.qty = qty;
    }

    public Double getUnitPrice() {
        return unitPrice;
    }

    public void setUnitPrice(Double unitPrice) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.unitPrice != null && !this.unitPrice.equals(unitPrice));
        this.unitPrice = unitPrice;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[5];
        columnValues[0] = getQuoteitemId();
        columnValues[1] = getQuoteId();
        columnValues[2] = getDescr();
        columnValues[3] = getQty();
        columnValues[4] = getUnitPrice();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setQuoteitemId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setQuoteitemId(null);
        }
        try {
            setQuoteId(Integer.parseInt(flds[1]));
        } catch(NumberFormatException ne) {
            setQuoteId(null);
        }
        setDescr(flds[2]);
        try {
            setQty(Integer.parseInt(flds[3]));
        } catch(NumberFormatException ne) {
            setQty(null);
        }
        try {
            setUnitPrice(Double.parseDouble(flds[4]));
        } catch(NumberFormatException ne) {
            setUnitPrice(null);
        }
    }

    @Override
    public Integer getDocId() {
        return getQuoteId();
    }

    @Override
    public void setDocId(Integer id) throws SQLException, ForeignKeyViolationException {
        setQuoteId(id);
    }
}
