// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sun Nov 01 10:53:35 EET 2015
// generated file: do not modify
package com.xgraf.orm;

import com.xgraf.orm.dbobject.DbObject;
import com.xgraf.orm.dbobject.ForeignKeyViolationException;
import com.xgraf.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Statementitem extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer statementitemId = null;
    private Integer statementId = null;
    private Date stitemDate = null;
    private String stitemRef = null;
    private String descr = null;
    private Double amount = null;
    private Double payment = null;
    private Double balance = null;

    public Statementitem(Connection connection) {
        super(connection, "statementitem", "statementitem_id");
        setColumnNames(new String[]{"statementitem_id", "statement_id", "stitem_date", "stitem_ref", "descr", "amount", "payment", "balance"});
    }

    public Statementitem(Connection connection, Integer statementitemId, Integer statementId, Date stitemDate, String stitemRef, String descr, Double amount, Double payment, Double balance) {
        super(connection, "statementitem", "statementitem_id");
        setNew(statementitemId.intValue() <= 0);
//        if (statementitemId.intValue() != 0) {
            this.statementitemId = statementitemId;
//        }
        this.statementId = statementId;
        this.stitemDate = stitemDate;
        this.stitemRef = stitemRef;
        this.descr = descr;
        this.amount = amount;
        this.payment = payment;
        this.balance = balance;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Statementitem statementitem = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT statementitem_id,statement_id,stitem_date,stitem_ref,descr,amount,payment,balance FROM statementitem WHERE statementitem_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                statementitem = new Statementitem(getConnection());
                statementitem.setStatementitemId(new Integer(rs.getInt(1)));
                statementitem.setStatementId(new Integer(rs.getInt(2)));
                statementitem.setStitemDate(rs.getDate(3));
                statementitem.setStitemRef(rs.getString(4));
                statementitem.setDescr(rs.getString(5));
                statementitem.setAmount(rs.getDouble(6));
                statementitem.setPayment(rs.getDouble(7));
                statementitem.setBalance(rs.getDouble(8));
                statementitem.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return statementitem;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO statementitem ("+(getStatementitemId().intValue()!=0?"statementitem_id,":"")+"statement_id,stitem_date,stitem_ref,descr,amount,payment,balance) values("+(getStatementitemId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getStatementitemId().intValue()!=0) {
                 ps.setObject(++n, getStatementitemId());
             }
             ps.setObject(++n, getStatementId());
             ps.setObject(++n, getStitemDate());
             ps.setObject(++n, getStitemRef());
             ps.setObject(++n, getDescr());
             ps.setObject(++n, getAmount());
             ps.setObject(++n, getPayment());
             ps.setObject(++n, getBalance());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getStatementitemId().intValue()==0) {
             stmt = "SELECT max(statementitem_id) FROM statementitem";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setStatementitemId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE statementitem " +
                    "SET statement_id = ?, stitem_date = ?, stitem_ref = ?, descr = ?, amount = ?, payment = ?, balance = ?" + 
                    " WHERE statementitem_id = " + getStatementitemId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getStatementId());
                ps.setObject(2, getStitemDate());
                ps.setObject(3, getStitemRef());
                ps.setObject(4, getDescr());
                ps.setObject(5, getAmount());
                ps.setObject(6, getPayment());
                ps.setObject(7, getBalance());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM statementitem " +
                "WHERE statementitem_id = " + getStatementitemId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setStatementitemId(new Integer(-getStatementitemId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getStatementitemId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT statementitem_id,statement_id,stitem_date,stitem_ref,descr,amount,payment,balance FROM statementitem " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Statementitem(con,new Integer(rs.getInt(1)),new Integer(rs.getInt(2)),rs.getDate(3),rs.getString(4),rs.getString(5),rs.getDouble(6),rs.getDouble(7),rs.getDouble(8)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Statementitem[] objects = new Statementitem[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Statementitem statementitem = (Statementitem) lst.get(i);
            objects[i] = statementitem;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT statementitem_id FROM statementitem " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getStatementitemId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return statementitemId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setStatementitemId(id);
        setNew(prevIsNew);
    }

    public Integer getStatementitemId() {
        return statementitemId;
    }

    public void setStatementitemId(Integer statementitemId) throws ForeignKeyViolationException {
        setWasChanged(this.statementitemId != null && this.statementitemId != statementitemId);
        this.statementitemId = statementitemId;
        setNew(statementitemId.intValue() == 0);
    }

    public Integer getStatementId() {
        return statementId;
    }

    public void setStatementId(Integer statementId) throws SQLException, ForeignKeyViolationException {
        if (statementId!=null && !Statement.exists(getConnection(),"statement_id = " + statementId)) {
            throw new ForeignKeyViolationException("Can't set statement_id, foreign key violation: statementitem_statement_fk");
        }
        setWasChanged(this.statementId != null && !this.statementId.equals(statementId));
        this.statementId = statementId;
    }

    public Date getStitemDate() {
        return stitemDate;
    }

    public void setStitemDate(Date stitemDate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.stitemDate != null && !this.stitemDate.equals(stitemDate));
        this.stitemDate = stitemDate;
    }

    public String getStitemRef() {
        return stitemRef;
    }

    public void setStitemRef(String stitemRef) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.stitemRef != null && !this.stitemRef.equals(stitemRef));
        this.stitemRef = stitemRef;
    }

    public String getDescr() {
        return descr;
    }

    public void setDescr(String descr) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.descr != null && !this.descr.equals(descr));
        this.descr = descr;
    }

    public Double getAmount() {
        return amount;
    }

    public void setAmount(Double amount) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.amount != null && !this.amount.equals(amount));
        this.amount = amount;
    }

    public Double getPayment() {
        return payment;
    }

    public void setPayment(Double payment) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.payment != null && !this.payment.equals(payment));
        this.payment = payment;
    }

    public Double getBalance() {
        return balance;
    }

    public void setBalance(Double balance) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.balance != null && !this.balance.equals(balance));
        this.balance = balance;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[8];
        columnValues[0] = getStatementitemId();
        columnValues[1] = getStatementId();
        columnValues[2] = getStitemDate();
        columnValues[3] = getStitemRef();
        columnValues[4] = getDescr();
        columnValues[5] = getAmount();
        columnValues[6] = getPayment();
        columnValues[7] = getBalance();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setStatementitemId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setStatementitemId(null);
        }
        try {
            setStatementId(Integer.parseInt(flds[1]));
        } catch(NumberFormatException ne) {
            setStatementId(null);
        }
        setStitemDate(toDate(flds[2]));
        setStitemRef(flds[3]);
        setDescr(flds[4]);
        try {
            setAmount(Double.parseDouble(flds[5]));
        } catch(NumberFormatException ne) {
            setAmount(null);
        }
        try {
            setPayment(Double.parseDouble(flds[6]));
        } catch(NumberFormatException ne) {
            setPayment(null);
        }
        try {
            setBalance(Double.parseDouble(flds[7]));
        } catch(NumberFormatException ne) {
            setBalance(null);
        }
    }
}
